<style>
    form {
        padding-bottom: 10px;
    }
</style>
<!-- это для регистрации нового внутреннего пользователя -->
<form id="registration">
    <fieldset>
        <legend>Registration</legend>
        <label>username<input type="text" name="username"></label>
        <label>password<input type="password" name="password"></label>
        <label>email<input type="email" name="email"></label>
        <button type="submit">registration</button>
    </fieldset>
</form>




<!-- это первый шаг -->
<form id="login">
    <fieldset>
        <legend>get IDs</legend>
        <label>username<input type="text" name="username"></label>
        <label>password<input type="password" name="password"></label>
        <label>required Number Of IDs<input type="number" name="requiredNumberOfIDs"></label>
        <button type="submit">get IDs</button>
    </fieldset>
</form>
<!-- это воторой шаг -->
<form id="sensors">
    <fieldset>
        <legend>Register sensors</legend>
        <label>Token<input type="text" name="token"></label>
        <label>ID<input type="number" name="id_1"></label>
        <label>ID<input type="number" name="id_2"></label>
        <label>ID<input type="number" name="id_3"></label>
        <button type="submit">Register</button>
    </fieldset>
</form>
<!-- это третий шаг -->
<form id="allIsInReadiness">
    <fieldset>
        <legend>all Is In Readiness</legend>
        <label>Token<input type="text" name="token"></label>
        <label>ID<input type="number" name="id_1"></label>
        <label>ID<input type="number" name="id_2"></label>
        <label>ID<input type="number" name="id_3"></label>
        <button type="submit">All is in readiness</button>
    </fieldset>
</form>


<form id="token">
    <fieldset>
        <legend>test token</legend>
        <label><input type="text" name="token"></label>
        <button type="submit">token</button>
    </fieldset>

</form>
<form id="sendemailpass">
    <fieldset>
        <legend>Sent email pass</legend>
        <label>username<input type="text" name="username"></label>
        <button type="submit">send email pass</button>
    </fieldset>

</form>
<form id="newpassword">
    <fieldset>
        <legend>New password</legend>
        <label>new password<input type="text" name="token"></label>
        <label>new password<input type="password" name="password"></label>
        <button type="submit">send email pass</button>
    </fieldset>

</form>
<form id="logout">
    <fieldset>
        <legend>logout</legend>
        <label>token<input type="text" name="token"></label>
        <button type="submit">logout</button>
    </fieldset>

</form>
<form id="refreshtoken">
    <fieldset>
        <legend>refreshtoken</legend>
        <label>longToken<input type="text" name="longToken"></label>
        <button type="submit">refreshtoken</button>
    </fieldset>
</form>
<form id="test">
    <fieldset>
        <legend>test</legend>
        <label>token<input type="text" name="token"></label>
        <button type="submit">test</button>
    </fieldset>
</form>
{{!-- <form id="experiment">
    <label>data<input type="text" name='data'></label>
    <button type="submit">send data</button>
</form> --}}
<script>
    /* document.getElementById('experiment').addEventListener('submit', (evt) => {
        evt.preventDefault()
        const form = evt.target
        const body = JSON.stringify({data: form.elements.data.value})
        fetch('http://localhost:3000/api/experiment-db', {
            method: 'POST',
            headers: new Headers({'Content-Type': 'application/json'}),
            body
        })
    }) */
    document.getElementById('test').addEventListener('submit', (evt) => {
        evt.preventDefault()
        const form = evt.target
        const body = JSON.stringify({
            token: form.elements.token.value
        })
        fetch('http://localhost:3000/api/test', {
            method: 'POST',
            headers: new Headers(
                {
                    'Content-Type': 'application/json'
                }
            ),
            body
        })
    })
    document.getElementById('refreshtoken').addEventListener('submit', (evt) => {
        evt.preventDefault()
        const form = evt.target
        const body = JSON.stringify({
            longToken: form.elements.longToken.value
        })
        fetch('http://localhost:3000/api/refreshtoken', {
            method: 'POST',
            headers: new Headers(
                {
                    'Content-Type': 'application/json'
                }
            ),
            body
        })
    })
    document.getElementById('logout').addEventListener('submit', (evt) => {
        evt.preventDefault()
        const form = evt.target
        const body = JSON.stringify({
            token: form.elements.token.value
        })
        fetch('http://localhost:3000/api/logout', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json'
            }),
            body
        })
    })
    document.getElementById('newpassword').addEventListener('submit', (evt) => { // не закончено
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            username: form.elements.username.value,
            password: form.elements.password.value,
            email: form.elements.email.value
        })
        fetch('http://localhost:3000/api/signup', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })
    // это для регистрации нового внутреннего пользователя
    document.getElementById('registration').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            username: form.elements.username.value,
            password: form.elements.password.value,
            email: form.elements.email.value
        })
        fetch('http://localhost:3000/api/signup/ytrwerewpoyhgjkjsgskhgqrazxcvbnmjhdfgtyiuoplhjgdnb', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })
    // это для запроса ID-шников
    document.getElementById('login').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            username: form.elements.username.value,
            password: form.elements.password.value,
            requiredNumberOfIDs: form.elements.requiredNumberOfIDs.value
        })
        fetch('http://localhost:3000/axleload/BluetoothSensorsRegistration/getIDs', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })

    // это для регистрации сенсоров
    // form.elements.id_1.value, form.elements.id_2.value, form.elements.id_3.value,
    document.getElementById('sensors').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            Token: form.elements.token.value,
            Sensors: [
                {
                    "DEVICE_TYPE": "0",
                    "ID": form.elements.id_1.value,
                    "ROLE": "Master",
                    "NAME": "ALS_776s2",
                    "MAC": "AA:98:09:FC:02:FE",
                    "DATE": "2023-03-25",
                    "PRODUCT-VERSION": "BLE_TK2699-1.3.0"
                },
                {
                    "DEVICE_TYPE": "0",
                    "ID": form.elements.id_2.value,
                    "ROLE": "Slave",
                    "NAME": "ALS_777s2",
                    "MAC": "AA:98:0A:FC:02:FE",
                    "DATE": "2023-03-25",
                    "PRODUCT-VERSION": "BLE_TK2699-1.3.0"
                },
                {
                    "DEVICE_TYPE": "0",
                    "ID": form.elements.id_3.value,
                    "ROLE": "Slave",
                    "NAME": "ALS_778s2",
                    "MAC": "AA:98:0B:FC:02:FE",
                    "DATE": "2023-03-25",
                    "PRODUCT-VERSION": "BLE_TK2699-1.3.0"
                }
            ]
        })
        fetch('http://localhost:3000/axleload/BluetoothSensorsRegistration/register', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })
    // allIsInReadiness
    document.getElementById('allIsInReadiness').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            Token: form.elements.token.value,
            ReadyProductsID: [
                form.elements.id_1.value,
                form.elements.id_2.value,
                form.elements.id_3.value,
            ]
        })
        fetch('http://localhost:3000/axleload/BluetoothSensorsRegistration/notificationOfReadiness', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })
    document.getElementById('token').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            token: form.elements.token.value,
        })
        fetch('http://localhost:3000/api/test', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })
    document.getElementById('sendemailpass').addEventListener('submit', (evt) => {
        evt.preventDefault();
        const form = evt.target
        const body = JSON.stringify({
            username: form.elements.username.value,
        })
        fetch('http://localhost:3000/api/sendemailpass', {
            method: 'POST',
            headers: new Headers({
                'Content-Type': 'application/json',
            }),
            body
        })
    })

</script>